class Monitor

types

public Alarm = <SYSTEM_UNSAFE>;

public TempRead = seq of Sensor`Reading
inv temp == len temp = 5;

instance variables

private readings : TempRead := [0, 0, 0, 0, 0];
private sensor : Sensor;

operations

public Step : () ==> ()
	Step () ==
	(
		readings := tl readings ^ [sensor.ReadTemp()];
		if not Safe(readings)
		then ReactorMonitor`RaiseAlarm(<SYSTEM_UNSAFE>);
	);
	
public Monitor : Sensor ==> Monitor
Monitor(s) ==
	sensor := s;

functions

-- the last reading in a sample is greater than the first
public Rising: TempRead -> bool
Rising(temp) ==
temp(5) > temp(1);

-- there is a reading in excess of 400 degrees
public OverLimit: TempRead -> bool
OverLimit(temp) ==
	exists p in set inds temp & temp(p) > 400;

-- all readings in a sample exceed 400 degrees
public COverLimit: TempRead -> bool
COverLimit(temp) ==
forall p in set inds temp & temp(p) > 400;

-- detecting whether a reactor can be considered safe
public Safe: TempRead -> bool
Safe(temp) ==
if temp(3)  = nil or temp(5) = nil
then true 
else temp(3) > 400 => temp(5) < 400;

-- detecting whether an alarm should be raised
public RaiseAlarm(temp: TempRead) alarm : bool
post if Safe(temp) then alarm = false else alarm = true; 

-- exactly one reading in the sample is in excess of 400
public OnePeak: TempRead -> bool
OnePeak(temp) ==
exists1 p in set inds temp & temp(p) > 400;

end Monitor