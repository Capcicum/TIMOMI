class Environment is subclass of GLOBAL

types

protected inline = (seq of UserPark * seq of UserRetrive);

private UserPark = (Time * PaymentInfo * tupleCar);
private UserRetrive = (Time * PaymentInfo * tupleLicensePlate);


private tupleCar = (tupleLicensePlate * bool);
private tupleLicensePlate = (CountryIdentifier * RegistrationLetters * NumberSeries);
		
protected outline = (Car * ParkingFee * Time);

public ParkingUsers ::
	time    : Time
	payInfo : PaymentInfo
	car     : Car;

public RetrivingUsers ::
	time    : Time
	payInfo : PaymentInfo
	licPlate: LicensePlate;

instance variables
	-- General
  io : IO := new IO();
	inlines  : seq of inline  := []; -- Todo
	outlines : seq of outline := [];
	busy : bool := true;
	
	parkingUsers   : seq of ParkingUsers := [];	
	retrivingUsers : seq of RetrivingUsers := [];

operations 

public Environment : String ==> Environment
Environment(fname) ==
	def mk_(-,mk_(userPark, userRet)) = io.freadval[inline](fname)
	in (parkingUsers := [mk_ParkingUsers(x.#1, x.#2, mk_Car(
												mk_LicensePlate(x.#3.#1.#1, x.#3.#1.#2, x.#3.#1.#3), x.#3.#2)) | x in seq userPark];
			retrivingUsers := [mk_RetrivingUsers(x.#1, x.#2, mk_LicensePlate(x.#3.#1, x.#3.#2, x.#3.#3)) | x in seq userRet];);

public Run : () ==> ()
Run() ==
 	is not yet specified;

public showResult : () ==> ()
showResult() ==
	def -= io.writeval[seq of outline](outlines) in skip;	
	
public isFinished : () ==> bool
isFinished() ==
	is not yet specified;
	
functions



end Environment