class ElevationGarage is subclass of GLOBAL

types

public GateState = [<Open> | <Closed>];

instance variables
	EntranceGate : GateState := <Open>;
	ExitGate : GateState := <Closed>;
	car : [Car] := nil; 
	isFree : bool := true;

operations
	
public parkCar : Car ==> ()
parkCar(pcar) == (
	car := pcar;
	isFree := false;)
pre car = nil;	
	
public handleParking:  PaymentInfo ==> ()
handleParking(ppi) == (	
	if not isFree
	then (if APS`validationService.validateLicensePlate(car.licensePlate) and 
	APS`validationService.validatePaymentInfo(ppi,car.parkingPermit)
		then(garageBusy();
				 APS`informationStation.registerCar(car.licensePlate,ppi);
				 -- STEP
				 APS`parkingLevel.parkCar(car);
				 car := nil;
				 garageFree();)
	else 
		--handleEvent
		(garageReadyForExit();
		car := nil;
		garageFree();
		);););
		
-- public retriveCar: 
		
public isGarageFree: () ==> bool
isGarageFree() == 
	return isFree;
	
public garageFree: () ==> () -- Lav et STM
garageFree() == (
	if EntranceGate = <Closed>
	then EntranceGate := <Open>;
	if ExitGate = <Open>
	then ExitGate := <Closed>;
	isFree := true;)
pre EntranceGate = ExitGate and isFree = false;

public garageBusy: () ==> ()
garageBusy() == (
	EntranceGate := <Closed>;)
pre EntranceGate = <Open> and ExitGate = <Closed> and isFree = false;

public garageReadyForExit: () ==> ()
garageReadyForExit() == (
	if EntranceGate = <Closed>
	then EntranceGate := <Open>;
	ExitGate := <Open>;)
pre ExitGate = <Closed> and isFree = false;

end ElevationGarage