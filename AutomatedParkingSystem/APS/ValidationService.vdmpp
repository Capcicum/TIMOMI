class ValidationService is subclass of GLOBAL
-- Ref: https://da.wikipedia.org/wiki/Nummerplade
values

alphabet = {'A','B','C','D','E','F','G','H','J','K','L','M','N','O','P','R','S','T','U','V','X','Y','Z'};

bannedRegistrationCombinations = {"BH", "BU", "CC", "CD", "DK", "DU", "EU", "KZ", "MU", "PY", "SS", "UD", "UN", "VC"};

operations

public validateLicensePlate : LicensePlate ==> bool 
validateLicensePlate(plp) == (
	return validateRegistrationLetters(plp) and validateNumberSeries(plp) and
		 plp not in set {x.license | x in set APS`garageDB};);

functions

public validateRegistrationLetters : LicensePlate -> bool
validateRegistrationLetters(plp) ==	
  plp.rl not in set bannedRegistrationCombinations and 
	plp.rl(2) <> 'O'
pre plp.rl(1) in set alphabet and plp.rl(2) in set alphabet;
	
	
public validateNumberSeries : LicensePlate -> bool
validateNumberSeries(plp) == 
	plp.ns >= 5000 and plp.ns <= 5399 or
	plp.ns >= 20000 and plp.ns <= 77999 or
	plp.ns >= 98000 and plp.ns <= 99999;

public validatePaymentInfo : PaymentInfo * bool -> bool -- For parking
validatePaymentInfo(ppi, pHasParkingPermit) ==
	if is_CreditCard(ppi)
		 then validateCreditCard(ppi)
	else if is_ParkingCard(ppi) and pHasParkingPermit
		 then validateParkingCard(ppi)
	else false
pre forall x in seq ppi & x <> ' '; 

public validatePaymentInfo : PaymentInfo -> bool -- For retrival
validatePaymentInfo(ppi) ==
	if is_CreditCard(ppi)
		 then validateCreditCard(ppi)
	else if is_ParkingCard(ppi)
		 then validateParkingCard(ppi)
	else false;

private validateCreditCard : PaymentInfo -> bool 
validateCreditCard(ppi) == 
	len ppi = 6
pre ppi <> [];
	
private validateParkingCard : PaymentInfo -> bool
validateParkingCard(ppi) ==
	len ppi = 6 and hd ppi = 'p' 
pre ppi <> [];

end ValidationService