class ValidationService is subclass of GLOBAL

values

-- Ref: https://da.wikipedia.org/wiki/Nummerplade
bannedRegistrationCombinations = {"BH", "BU", "CC", "CD", "DK", "DU", "EU", "KZ", "MU", "PY", "SS", "UD", "UN", "VC", ""};
bannedRegistrationLetters = {'I', 'Q', 'Æ', 'Ø', 'Å', ' '};

operations

public validateLicensePlate : LicensePlate ==> bool 
validateLicensePlate(plp) == (
	return validateRegistrationLetters(plp) and validateNumberSeries(plp) and
		 plp not in set {x.license | x in set APS`garageDB};);

functions

public validateRegistrationLetters : LicensePlate -> bool
validateRegistrationLetters(plp) ==	
  plp.rl not in set bannedRegistrationCombinations and 
	plp.rl(1) not in set bannedRegistrationLetters and
	plp.rl(2) not in set bannedRegistrationLetters and
	plp.rl(2) <> 'O';
	
	
public validateNumberSeries : LicensePlate -> bool
validateNumberSeries(plp) == 
	plp.ns >= 5000 and plp.ns <= 5399 or
	plp.ns >= 20000 and plp.ns <= 77999 or
	plp.ns >= 98000 and plp.ns <= 99999;

public validatePaymentInfo : PaymentInfo * bool -> bool -- For parking
validatePaymentInfo(ppi, pHasParkingPermit) ==
	if is_CreditCard(ppi)
		 then validateCreditCard(ppi)
	else if is_ParkingCard(ppi) and pHasParkingPermit
		 then validateParkingCard(ppi)
	else false;

public validatePaymentInfo : PaymentInfo -> bool -- For retrival
validatePaymentInfo(ppi) ==
	if is_CreditCard(ppi)
		 then validateCreditCard(ppi)
	else if is_ParkingCard(ppi)
		 then validateParkingCard(ppi)
	else false;	

public validateCreditCard : PaymentInfo -> bool -- [1,2,3,4,5,6]
validateCreditCard(ppi) == 
	len ppi = 6;
	
public validateParkingCard : PaymentInfo -> bool -- [p,1,2,3,4,5]
validateParkingCard(ppi) ==
	len ppi = 6 and hd ppi = 'p';

end ValidationService