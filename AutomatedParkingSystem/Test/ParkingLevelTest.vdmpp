class ParkingLevelTest is subclass of TestCase, GLOBAL

values
car1 : Car = mk_Car(mk_LicensePlate(<Danish>, "PT", 49000), true); 
car2 : Car = mk_Car(mk_LicensePlate(<Danish>, "PT", 49001), true); 
operations 

protected runTest : () ==> ()
runTest() == 
	(parkCarTest();
		removeCarTest();
		getCarTest();
		retriveCarTest(););
	
protected parkCarTest : () ==> ()
parkCarTest() == (
	dcl parkingLevel : ParkingLevel := new ParkingLevel();
	parkingLevel.parkCar(car1);
	assertTrue(card parkingLevel.getParkingSpots() = 1);
	parkingLevel.parkCar(car2);
	assertTrue(parkingLevel.getCar(car1.licensePlate).licensePlate = car1.licensePlate);
	assertTrue(parkingLevel.getCar(car2.licensePlate) = car2);
	assertTrue(card parkingLevel.getParkingSpots() = 2););

protected removeCarTest : () ==> ()
removeCarTest() == (
	dcl parkingLevel : ParkingLevel := new ParkingLevel();
	parkingLevel.parkCar(car1);
	parkingLevel.parkCar(car2);
	assertTrue(card parkingLevel.getParkingSpots() = 2);
	parkingLevel.removeCar(car1.licensePlate);
	parkingLevel.removeCar(car2.licensePlate);	
	assertTrue(card parkingLevel.getParkingSpots() = 0););

protected getCarTest : () ==> ()
getCarTest() == (
	dcl parkingLevel : ParkingLevel := new ParkingLevel();
	parkingLevel.parkCar(car1);
	parkingLevel.parkCar(car2);
	assertTrue(is_Car(parkingLevel.getCar(car1.licensePlate)));
	assertTrue(is_Car(parkingLevel.getCar(car2.licensePlate))););

protected retriveCarTest : () ==> ()
retriveCarTest() == (
	dcl parkingLevel : ParkingLevel := new ParkingLevel();
	parkingLevel.parkCar(car1);
	parkingLevel.parkCar(car2);
	assertTrue(is_Car(parkingLevel.retriveCar(car1.licensePlate)));
	assertTrue(is_Car(parkingLevel.retriveCar(car2.licensePlate)));
	assertTrue(card parkingLevel.getParkingSpots() = 0););



end ParkingLevelTest