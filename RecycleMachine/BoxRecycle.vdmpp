class BoxRecycle

operations

private HandleRecycleBox : Recycle`RecycleBox ==> [Recycle`RecycleBox]
HandleRecycleBox(prb) ==
	if ScanBottles(prb, RecycleMachine`rr)
	then (RecycleMachine`vh.AddToSum(TotalRecycleSum(prb.ri, RecycleMachine`rr));
				return nil)
	else return prb;
	
functions

private ScanBottles : Recycle`RecycleBox * RecycleRules -> bool
ScanBottles(prb, prr) ==
		forall i in set inds prb.ri & prr.IsRecycleValid(prb.ri(i)) and
		forall j,k in set inds prb.ri & prb.ri(j).s = prb.ri(k).s;	

private TotalRecycleSum : seq of Recycle`RecycleItem * RecycleRules -> real
TotalRecycleSum(pri, prr) ==
	if pri = []
	then 0
	else prr.GetPrice(hd pri) + TotalRecycleSum(tl pri, prr)
measure Len;

Len : seq of Recycle`RecycleItem * RecycleRules -> nat
Len(pri, -) ==
	len pri;

end BoxRecycle