class RecycleRules 

instance variables

ruleSet : map Recycle`RecycleItem to real := {|->};

functions 

operations

public RecycleRules : () ==> RecycleRules
RecycleRules() == 
	ruleSet := Rules; 
	 
pure public IsRecycleValid : Recycle`RecycleItem ==> bool
IsRecycleValid(pri) ==
	return pri in set dom ruleSet;

pure public GetPrice : Recycle`RecycleItem ==> real 
GetPrice(pri) ==
	return ruleSet(pri)
pre IsRecycleValid(pri);

values

Rules = {mk_Recycle`RecycleItem(<A>, true, <Disp>) |-> 1,
mk_Recycle`RecycleItem(<B>, true, <Disp>) |-> 1.5,
mk_Recycle`RecycleItem(<C>, true, <Disp>) |-> 3,
mk_Recycle`RecycleItem(<A>, true, <GUHL>) |-> 1,
mk_Recycle`RecycleItem(<B>, true, <PUL>) |-> 1.5,
mk_Recycle`RecycleItem(<C>, true, <GOHL>) |-> 3,
mk_Recycle`RecycleItem(<C>, true, <POL>) |-> 3,
mk_Recycle`RecycleItem(nil, true, <GUHL>) |-> 1,
mk_Recycle`RecycleItem(nil, true, <PUL>) |-> 1.5,
mk_Recycle`RecycleItem(nil, true, <GOHL>) |-> 3,
mk_Recycle`RecycleItem(nil, true, <POL>) |-> 3,
mk_Recycle`RecycleItem(nil, false, <GUHL>) |-> 1,
mk_Recycle`RecycleItem(nil, false, <PUL>) |-> 1.5,
mk_Recycle`RecycleItem(nil, false, <GOHL>) |-> 3,
mk_Recycle`RecycleItem(nil, false, <POL>) |-> 3,
mk_Recycle`RecycleItem(<A>, false, <GUHL>) |-> 1,
mk_Recycle`RecycleItem(<B>, false, <PUL>) |-> 1.5,
mk_Recycle`RecycleItem(<C>, false, <GOHL>) |-> 3,
mk_Recycle`RecycleItem(<C>, false, <POL>) |-> 3,
mk_Recycle`RecycleItem(nil, true, <Can>) |-> 0,
mk_Recycle`RecycleItem(nil, false, <Can>) |-> 0};
	
end RecycleRules