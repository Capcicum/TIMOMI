class Storage is subclass of GLOBAL

instance variables

itemStorage : set of Item := {};
inv card itemStorage <= itemLimit; 

boxStorage : set of Box := {};
inv card boxStorage <= boxLimit;

inv StorageInv(itemStorage, boxStorage);

itemLimit : nat;
boxLimit : nat;

operations

public Storage : nat * nat ==> Storage
Storage(pil, pbl) ==
	(itemLimit := pil;
	boxLimit := pbl);
	
public GetItemStorage : () ==> set of Recycle
GetItemStorage() ==
	return itemStorage;
	
public GetBoxStorage : () ==> set of Recycle
GetBoxStorage() ==
	return boxStorage;
	
public Store : [Recycle] ==> ()
Store(prr) ==
	if is_Item(prr)
	then 
		if ExistValidEmptyBox(boxStorage, prr.ip.s)
		then 
			let x in set boxStorage be st x.ty = prr.ip.s and card dom x.ri < x.lg
			in 
				let y in set {1,...,x.lg} be st {y} inter rng x.ri = {}
				in
					(dcl box: Box := x;
					box.ri := box.ri munion {prr |-> y};
					boxStorage := boxStorage\{x} union {box})
		else 
			itemStorage := itemStorage union {prr}
	else if is_Box(prr)
	then
		boxStorage := boxStorage union {prr}
pre StorePre(itemStorage, boxStorage, prr)
post StorageInv(itemStorage, boxStorage);

public StorageAvailableItem : Shape ==> bool
StorageAvailableItem(ps) ==
	return ExistValidEmptyBox(boxStorage, ps) or card itemStorage < itemLimit;
	
public StorageAvailableBox : () ==> bool 
StorageAvailableBox() ==
	return (card boxStorage) < boxLimit;
	
public ClearItemStorage : () ==> ()
ClearItemStorage() ==
	itemStorage := {};
	
public ClearBoxStorage : () ==> ()
ClearBoxStorage() ==
	boxStorage := {};
	
functions 

public StorageInv : set of Item * set of Box -> bool 
StorageInv(psi, psb) ==
(forall i in set psb & card dom i.ri <= i.lg and
	forall j in set psi & 
		forall k in set dom i.ri & k.id <> j.id) and 
(forall l, m in set psb & l <> m => l.id <> m.id and
	forall n in set dom l.ri &
		forall o in set dom m.ri & n.id <> o.id) and 
(forall p,q in set psi & p <> q => p.id <> q.id); 

public StorePre : set of Item * set of Box * Recycle -> bool
StorePre(psi, psb, pr) == 
	if is_Item(pr)
	then 
		((forall i in set psi & i.id <> pr.id) and 
		(forall j in set psb & 
			forall k in set dom j.ri & k.id <> pr.id))
	else 
		forall i in set psb & i.id <> pr.id;

public ExistValidEmptyBox : set of Box * Shape -> bool
ExistValidEmptyBox(psb, ps) ==
	exists i in set psb & i.ty = ps and card dom i.ri < i.lg;

end Storage