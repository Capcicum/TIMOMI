class Conveyor is subclass of GLOBAL

instance variables

entranceArea : [Recycle] := nil;
scanningArea : [Recycle] := nil;

scanProgress : nat := 0;
inv scanProgress <= scanProgressTime;

scanProgressTime :nat;

isScanning : bool := false;
isWaitingForValidation : bool := false;

operations 
		
public Conveyor : nat ==> Conveyor
Conveyor(pspt) == 
	scanProgressTime := pspt;
	
public ValidationResult : bool ==> ()
ValidationResult(pr) ==
	(if pr
	then
		MoveConveyor() 
	else
		Reject();
	isWaitingForValidation := false)
pre isWaitingForValidation and scanningArea <> nil;

public InputRecycle : Recycle ==> ()
InputRecycle(prr) == 
	entranceArea := prr
pre entranceArea = nil;

public RemoveRecycle : () ==> Recycle
RemoveRecycle() ==
	(dcl rec : Recycle := entranceArea;
	entranceArea := nil;
	return rec)
pre entranceArea <> nil;
	
public Step : () ==> ()
Step() == 
	((if entranceArea <> nil and scanningArea = nil
	then 
		(MoveConveyor();
		isScanning := true;
		RecycleMachine`recycleMachineController.SetState(<Ready>))
	else if entranceArea = nil and scanningArea <> nil 
	then 
		RecycleMachine`recycleMachineController.SetState(<Ready>)
	else if entranceArea <> nil and scanningArea <> nil
	then 
		(if is_Box(entranceArea)
		then RecycleMachine`recycleMachineController.SetState(<TooManyBoxes>)
		else RecycleMachine`recycleMachineController.SetState(<TooManyItems>)));
	if isScanning = true
	then 
		Scan());

public IsFinished: () ==> bool
IsFinished() ==
	return not (isScanning or isWaitingForValidation);
		
private MoveConveyor : () ==> ()
MoveConveyor() ==
	(RecycleMachine`storage.Store(scanningArea);
	scanningArea := entranceArea;
 	entranceArea := nil;
 	scanProgress := 0);
 	
private Reject : () ==> ()
Reject() ==
 (entranceArea := scanningArea;
 scanningArea := nil;
 scanProgress := 0)
pre scanningArea <> nil and entranceArea = nil;
 
private Scan : () ==> ()
Scan() ==
	if scanProgress >= scanProgressTime
	then 
		(if is_Item(scanningArea)
		then RecycleMachine`recycleMachineController.Validate(scanningArea.rp)
		else RecycleMachine`recycleMachineController.validate(MakeBoxProperties(scanningArea));
		isWaitingForValidation := true;
		isScanning := false;
		scanProgress := 0)
	else
		scanProgress := scanProgress + 1
pre entranceArea = nil and scanningArea <> nil and isScanning;

functions

private MakeBoxProperties : Box -> BoxProperties
MakeBoxProperties(pb) ==
	mk_BoxProperties(pb.bt, [x.ip | x in set pb.ri]);

end Conveyor