class Conveyor is subclass of GLOBAL

instance variables

entranceArea 			: [Recycle] 		:= nil;
scanningArea 			: [Recycle] 		:= nil;
scanStartTime 		: nat 					:= 0;
scanProgressTime 	: nat;
state 						: ConveyorState := <Idle>;

types 

ConveyorState = <Idle> | <Scanning> | <Waiting>;

operations 
		
public Conveyor : nat ==> Conveyor
Conveyor(pspt) == 
	scanProgressTime := pspt;
	
public ValidationResult : bool ==> ()
ValidationResult(pr) ==
	(state := <Idle>;
	if pr
	then MoveConveyor() 
	else Reject();)
pre state = <Waiting> and scanningArea <> nil and entranceArea = nil
post scanningArea = nil;

public InputRecycle : Recycle ==> ()
InputRecycle(prr) == 
	entranceArea := prr
pre entranceArea = nil;

public RemoveRecycle : () ==> Recycle
RemoveRecycle() ==
	(dcl rec : Recycle := entranceArea;
	entranceArea := nil;
	return rec)
pre entranceArea <> nil;
	
public Step : () ==> ()
Step() == 
	((if entranceArea <> nil and scanningArea = nil
	then 
		(MoveConveyor();
		state := <Scanning>;
		scanStartTime := World`timerRef.GetTime();
		RecycleMachine`recycleMachineController.SetState(<Ready>))
	else if entranceArea = nil and scanningArea <> nil 
	then 
		RecycleMachine`recycleMachineController.SetState(<Ready>)
	else if entranceArea <> nil and scanningArea <> nil
	then 
		(if is_Box(entranceArea)
		then RecycleMachine`recycleMachineController.SetState(<TooManyBoxes>)
		else RecycleMachine`recycleMachineController.SetState(<TooManyItems>)));
	if state = <Scanning>
	then 
		Scan());

pure public IsFinished: () ==> bool
IsFinished() ==
	return state = <Idle> and entranceArea = nil and scanningArea = nil;
		
private MoveConveyor : () ==> ()
MoveConveyor() ==
	(RecycleMachine`storage.Store(scanningArea);
	scanningArea := entranceArea;
 	entranceArea := nil;)
pre state = <Idle>;
 	
private Reject : () ==> ()
Reject() ==
 (entranceArea := scanningArea;
 scanningArea := nil;)
pre scanningArea <> nil and entranceArea = nil and state = <Idle>;
 
private Scan : () ==> ()
Scan() ==
	if World`timerRef.GetTime() - scanStartTime >= scanProgressTime
	then 
		(if is_Item(scanningArea)
		then RecycleMachine`recycleMachineController.Validate(scanningArea.ip)
		else RecycleMachine`recycleMachineController.Validate(MakeBoxProperties(scanningArea));
		state := <Waiting>;)
pre entranceArea = nil and scanningArea <> nil and state = <Scanning>;

functions

private MakeBoxProperties : Box -> BoxProperties
MakeBoxProperties(pb) ==
	mk_BoxProperties(pb.ty, Item2ItemProperties(dom pb.ri));

private Item2ItemProperties : set of Item -> seq of ItemProperties
Item2ItemProperties(psi) == 
if psi = {}
then []
else 
	let i in set psi
	in 
		[i.ip] ^ Item2ItemProperties(psi\{i})
measure Card;

private Card : set of Item  -> nat
Card(psi) == 
	card psi;

end Conveyor