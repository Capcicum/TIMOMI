class RecycleMachineController is subclass of GLOBAL

instance variables

sum : real := 0;
state : RecycleMachineState := <Ready>;

itemsForValidation : seq of Recycle := [];

itemValidationTime : nat;
boxValidationTime : nat;

validationProgress : nat := 0;

isValidating : bool := false;

operations 

public RecycleMachineController : nat * nat ==> RecycleMachineController
RecycleMachineController(pivt, pbvt) ==
	(itemValidationTime := pivt;
	boxValidationTime := pbvt);

public HandleUserMoney : () ==> real
HandleUserMoney() == 
	(dcl amount : real := sum;
	sum := 0;
	return amount);

public SetState : RecycleMachineState ==> ()
SetState(prms) ==
	(state :=  prms;
	RecycleMachine`ui.SetState(state));
	
public Validate : Recycle ==> ()
Validate(prr) ==
	itemsForValidation := itemsForValidation ^ [prr];
	
public IsFinished: () ==> bool
IsFinished() ==
	return not isValidating;
	
public Step: () ==> ()
Step() ==
	if state = <Ready>
	then 
		if len itemsForValidation <> 0
		then 
			(if is_RecycleItem(hd itemsForValidation)
			then 
				(if validationProgress = itemValidationTime
				then HandleRecycleItem()
				else validationProgress := validationProgress + 1;)
			else
				(if validationProgress = boxValidationTime
				then HandleRecycleBox()
				else validationProgress := validationProgress + 1;));

private HandleRecycleItem : () ==> ()
HandleRecycleItem() ==
	(isValidating := false;
	validationProgress := 0;
	(if RecycleMachine`rr.IsRecycleValid(hd itemsForValidation)
	then 
		(if RecycleMachine`storage.StorageAvailableItem()
			then 
				(AddToSum(RecycleMachine`rr.GetPrice(hd itemsForValidation));
				RecycleMachine`singleItemConveyor.ValidationResult(true);)
		else 
			(RecycleMachine`singleItemConveyor.ValidationResult(false);
			SetState(<ItemStorageFull>));)
	else 
		(RecycleMachine`singleItemConveyor.ValidationResult(false);
		SetState(<ItemInvalid>)););	
	itemsForValidation := tl itemsForValidation);
	
private HandleRecycleBox : () ==> ()
HandleRecycleBox() ==
	(isValidating := false;
	validationProgress := 0;
	(if ScanBottles(hd itemsForValidation, RecycleMachine`rr)
	then 
		(if RecycleMachine`storage.StorageAvailableBox()
		then 
			(AddToSum(RecycleMachine`rr.GetBoxPrice() + TotalRecycleSum((hd itemsForValidation).ri, RecycleMachine`rr));
			RecycleMachine`boxConveyor.ValidationResult(true))
		else
			(RecycleMachine`boxConveyor.ValidationResult(false);
			SetState(<BoxStorageFull>))) 		
	else (RecycleMachine`boxConveyor.ValidationResult(false);
				SetState(<BoxInvalid>)));
	itemsForValidation := tl itemsForValidation);

private AddToSum : real ==> ()
AddToSum(pv) ==
	sum := sum + pv;
	
functions 

private TotalRecycleSum : seq of ItemProperties * RecycleService -> real
TotalRecycleSum(pri, prr) ==
	if pri = []
	then 0
	else prr.GetPrice(hd pri) + TotalRecycleSum(tl pri, prr)
measure Len;

Len : seq of ItemProperties * RecycleService -> nat
Len(pri, -) ==
	len pri;

private ScanBottles : BoxProperties * RecycleService -> bool
ScanBottles(prb, prr) ==
		forall i in set inds prb.ri & prr.IsRecycleValid(prb.ri(i)) and
		forall j in set inds prb.ri & prb.ri(j).s = <GUHL>;	

end RecycleMachineController